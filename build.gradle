plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion SysConfig.compileSdkVersion

    defaultConfig {
        minSdkVersion SysConfig.minSdkVersion
        targetSdkVersion SysConfig.targetSdkVersion
        versionCode 1
        versionName "1.0"

        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
            aaptOptions {
                cruncherEnabled false
            }
        }

        /**
         * 建议提测用这个构建类型，并使用 BuildConfig.BUILD_TYPE 判断是否等于 beta，作为
         * 开启动态修改 Url，动态打开日志等功能的标记。
         */
        beta {
            initWith release
        }
    }

    buildFeatures{
        dataBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "${JavaVersion.VERSION_1_8}"
    }

    sourceSets {
        main {
            java {
                /*
                 TODO 这里似乎无法根据配置来排除某些类，而是取决于是否使用了某类来自动排除
                 */
            }
        }
    }
}

/**
 * TODO
 * 根据配置文件，决定是否引入某些库。
 * 如果框架中有用到某库，那么在排除该库的时候需要 compileOnly，以便编译通过，比如 room
 * kapt 可能需要单独在 module 中声明
 */
dependencies {
    api fileTree(dir: "libs", include: ["*.jar"])
    // 这两个是创建项目默认就有的库
    api Deps.kotlinStdLib
    api Deps.kotlinKTX
    // 兼容库
    api Deps.appcompat
    // 约束布局
    api Deps.constraintLayout
    // 侧滑布局，是用来界面侧滑退出的，因为只有一个类，就不做可配置去除了
    api Deps.slidingPaneLayout
    // MD 设计，新的应用推荐加入夜间模式，默认工程增加了这个库
    api Deps.material

    // 以下三个是为了使用最新的特性
//    api Deps.activity
//    api Deps.activityKTX
    api Deps.fragment

    // 在 Lifecycles 中使用协程，视图销毁则自动取消
    api Deps.lifecycleRuntimeKTX
    // 在 LiveData 中使用协程
    api Deps.lifecycleLiveDataKTX
    // 简化 Fragment 的 API 调用，同时通过 viewModels 扩展方法创建 vm 来的非常容易
    api Deps.fragmentKTX
    // 使用 Java8 替换 lifecycleCompiler，让 vm 可以感知 v 生命周期
    api Deps.lifecycleJava8

    // 监控应用的生命周期
    checkMVVMConfigProperty(IncludeLib.lifecycleProcess, "lifecycleProcess")
    if (IncludeLib.lifecycleProcess) {
        api Deps.lifecycleProcess
    } else {
        compileOnly Deps.lifecycleProcess
    }

    // 内嵌的加载中库
    checkMVVMConfigProperty(IncludeLib.loadSir, "loadSir")
    if (IncludeLib.loadSir) {
        api Deps.loadSir
    } else {
        compileOnly Deps.loadSir
    }

    // RecyclerView
    checkMVVMConfigProperty(IncludeLib.recyclerView, "recyclerView")
    if (IncludeLib.recyclerView) {
        api Deps.recyclerView
    } else {
        compileOnly Deps.recyclerView
    }

    // 数据库
    checkMVVMConfigProperty(IncludeLib.room, "room")
    if (IncludeLib.room) {
        api Deps.roomRuntime
        // kapt Deps.roomCompiler
    } else {
        compileOnly Deps.roomRuntime
    }

    // 网络，默认使用 gson 解析 json
    checkMVVMConfigProperty(IncludeLib.retrofit2, "retrofit2")
    if (IncludeLib.retrofit2) {
        api Deps.retrofit2
        api Deps.gson
        api Deps.gsonConverter
    } else {
        compileOnly Deps.retrofit2
        compileOnly Deps.gsonConverter
    }

    // 图片，使用 glide
    checkMVVMConfigProperty(IncludeLib.glide, "glide")
    if (IncludeLib.glide) {
        api Deps.glide
        // kapt Deps.glideCompiler
    } else {
        compileOnly Deps.glide
    }

    // 权限申请
    checkMVVMConfigProperty(IncludeLib.livePermissions, "livePermissions")
    if (IncludeLib.livePermissions) {
        api Deps.livePermissions
    } else {
        compileOnly Deps.livePermissions
    }

    // debug 阶段内存泄露检测
    checkMVVMConfigProperty(IncludeLib.leakCanary2, "leakCanary2")
    if (IncludeLib.leakCanary2) {
        debugImplementation Deps.leakCanary2
    }
}

configurations.all {
    resolutionStrategy {
        force Deps.recyclerView
    }
}